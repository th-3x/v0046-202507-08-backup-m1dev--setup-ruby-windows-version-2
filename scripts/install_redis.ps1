# Redis Installation Script for Windows
# This script installs Redis as a Windows service

param (
    [string]$InstallDir = "C:\Redis",
    [int]$Port = 6379,
    [string]$MaxMemory = "256mb",
    [string]$MaxMemoryPolicy = "allkeys-lru",
    [bool]$Persistence = $true
)

# Set error action preference
$ErrorActionPreference = "Stop"

# Log file
$logFile = Join-Path $PSScriptRoot "..\logs\redis_install_$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss').log"

# Function to write to log and console
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    
    # Output to console with color based on level
    switch ($Level) {
        "ERROR" { Write-Host $logMessage -ForegroundColor Red }
        "WARNING" { Write-Host $logMessage -ForegroundColor Yellow }
        "SUCCESS" { Write-Host $logMessage -ForegroundColor Green }
        default { Write-Host $logMessage -ForegroundColor Cyan }
    }
    
    # Also append to log file
    $logMessage | Out-File -FilePath $logFile -Append
}

# Create logs directory if it doesn't exist
$logsDir = Join-Path $PSScriptRoot "..\logs"
if (-not (Test-Path $logsDir)) {
    New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
}

Write-Log "Starting Redis installation..."

# Check if Redis is already installed
$redisService = Get-Service -Name "Redis" -ErrorAction SilentlyContinue

if ($redisService) {
    Write-Log "Redis is already installed as a Windows service" "SUCCESS"
    exit 0
}

# Create Redis directories
if (-not (Test-Path $InstallDir)) {
    New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
    Write-Log "Created Redis directory: $InstallDir" "SUCCESS"
}

# Create logs and data directories
$logsDir = Join-Path $InstallDir "logs"
$dataDir = Join-Path $InstallDir "data"

if (-not (Test-Path $logsDir)) {
    New-Item -ItemType Directory -Path $logsDir -Force | Out-Null
    Write-Log "Created logs directory: $logsDir" "SUCCESS"
}

if (-not (Test-Path $dataDir)) {
    New-Item -ItemType Directory -Path $dataDir -Force | Out-Null
    Write-Log "Created data directory: $dataDir" "SUCCESS"
}

# Download Redis
$downloadUrl = "https://github.com/microsoftarchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.zip"
$downloadPath = Join-Path $env:TEMP "redis.zip"

try {
    Write-Log "Downloading Redis for Windows..." "INFO"
    Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath
    Write-Log "Redis downloaded successfully" "SUCCESS"
    
    # Extract Redis
    Write-Log "Extracting Redis..." "INFO"
    Expand-Archive -Path $downloadPath -DestinationPath $InstallDir -Force
    Write-Log "Redis extracted to $InstallDir" "SUCCESS"
    
    # Clean up the zip file
    Remove-Item $downloadPath -Force
} catch {
    Write-Log "Failed to download or extract Redis: $_" "ERROR"
    exit 1
}

# Generate Redis configuration
$configPath = Join-Path $InstallDir "redis.conf"

# Create Redis configuration
$redisConfig = @"
# Redis configuration file generated by install_redis.ps1

# Network
port $Port
bind 127.0.0.1

# General
daemonize no
pidfile "$InstallDir\redis.pid"
loglevel notice
logfile "$logsDir\redis.log"

# Memory Management
maxmemory $MaxMemory
maxmemory-policy $MaxMemoryPolicy

# Persistence
dir "$dataDir"
"@

# Add persistence configuration if enabled
if ($Persistence) {
    $redisConfig += @"

# Persistence Configuration
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec
"@
}

# Write configuration to file
$redisConfig | Out-File -FilePath $configPath -Encoding utf8
Write-Log "Redis configuration generated at $configPath" "SUCCESS"

# Install Redis as a Windows service
$redisSvcPath = Join-Path $InstallDir "redis-server.exe"

if (-not (Test-Path $redisSvcPath)) {
    Write-Log "Redis server executable not found at $redisSvcPath" "ERROR"
    exit 1
}

# Install Redis service
try {
    Write-Log "Installing Redis as a Windows service..." "INFO"
    $installArgs = "--service-install --service-name Redis --port $Port --loglevel verbose --logfile `"$logsDir\redis.log`""
    
    if ($Persistence) {
        $installArgs += " --appendonly yes"
    }
    
    $installService = Start-Process -FilePath $redisSvcPath -ArgumentList $installArgs -NoNewWindow -Wait -PassThru
    
    if ($installService.ExitCode -ne 0) {
        Write-Log "Failed to install Redis service. Exit code: $($installService.ExitCode)" "ERROR"
        exit 1
    }
    
    Write-Log "Redis service installed successfully" "SUCCESS"
    
    # Start the Redis service
    Start-Service -Name "Redis"
    Write-Log "Redis service started" "SUCCESS"
} catch {
    Write-Log "Failed to install or start Redis service: $_" "ERROR"
    exit 1
}

# Create Redis CLI shortcut
$redisCliPath = Join-Path $InstallDir "redis-cli.exe"
$shortcutPath = Join-Path $PSScriptRoot "redis-cli.lnk"

try {
    $WshShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WshShell.CreateShortcut($shortcutPath)
    $Shortcut.TargetPath = $redisCliPath
    $Shortcut.WorkingDirectory = $InstallDir
    $Shortcut.Description = "Redis Command Line Interface"
    $Shortcut.Save()
    
    Write-Log "Redis CLI shortcut created at: $shortcutPath" "SUCCESS"
} catch {
    Write-Log "Failed to create Redis CLI shortcut: $_" "WARNING"
}

# Create Redis test script
$redisTestPath = Join-Path $PSScriptRoot "test_redis.ps1"

@"
# Redis Test Script
Write-Host "Testing Redis connection..." -ForegroundColor Cyan

try {
    `$redisCliPath = "$InstallDir\redis-cli.exe"
    `$pingResult = & `$redisCliPath ping
    
    if (`$pingResult -eq "PONG") {
        Write-Host "Redis connection successful! Response: `$pingResult" -ForegroundColor Green
        
        # Test basic Redis operations
        Write-Host "`nTesting basic Redis operations..." -ForegroundColor Cyan
        
        # Set a key
        & `$redisCliPath set test_key "Hello from Windows Redis!"
        Write-Host "Set test_key" -ForegroundColor Green
        
        # Get the key
        `$getValue = & `$redisCliPath get test_key
        Write-Host "Get test_key: `$getValue" -ForegroundColor Green
        
        # Delete the key
        & `$redisCliPath del test_key
        Write-Host "Deleted test_key" -ForegroundColor Green
        
        # Check Redis info
        Write-Host "`nRedis Server Information:" -ForegroundColor Cyan
        & `$redisCliPath info server | ForEach-Object { Write-Host `$_ -ForegroundColor Gray }
        
        # Check Redis memory
        Write-Host "`nRedis Memory Information:" -ForegroundColor Cyan
        & `$redisCliPath info memory | ForEach-Object { Write-Host `$_ -ForegroundColor Gray }
    } else {
        Write-Host "Redis connection test returned unexpected result: `$pingResult" -ForegroundColor Yellow
    }
} catch {
    Write-Host "Failed to test Redis connection: `$_" -ForegroundColor Red
}
"@ | Out-File -FilePath $redisTestPath -Encoding utf8

Write-Log "Created Redis test script at: $redisTestPath" "SUCCESS"

# Create Redis status page
$redisStatusPath = Join-Path $PSScriptRoot "redis_status.php"

@"
<?php
// Redis Status Page
header('Content-Type: text/html');
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Redis Status</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 3px;
            font-weight: bold;
        }
        .online {
            background-color: #d4edda;
            color: #155724;
        }
        .offline {
            background-color: #f8d7da;
            color: #721c24;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .refresh {
            display: inline-block;
            margin-top: 20px;
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 4px;
        }
        .refresh:hover {
            background-color: #0069d9;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Redis Server Status</h1>
        
        <?php
        // Check if Redis is installed
        \$redisInstalled = file_exists('$InstallDir\\redis-server.exe');
        
        if (!\$redisInstalled) {
            echo '<p>Redis is not installed at the expected location: $InstallDir</p>';
            exit;
        }
        
        // Check if Redis service is running
        \$status = 'offline';
        \$statusClass = 'offline';
        \$info = [];
        
        try {
            // Try to connect to Redis using shell command
            \$output = [];
            \$returnVar = 0;
            exec('$InstallDir\\redis-cli.exe ping', \$output, \$returnVar);
            
            if (\$returnVar === 0 && isset(\$output[0]) && \$output[0] === 'PONG') {
                \$status = 'online';
                \$statusClass = 'online';
                
                // Get Redis info
                \$infoOutput = [];
                exec('$InstallDir\\redis-cli.exe info', \$infoOutput);
                
                foreach (\$infoOutput as \$line) {
                    if (strpos(\$line, ':') !== false) {
                        list(\$key, \$value) = explode(':', \$line, 2);
                        \$info[\$key] = \$value;
                    }
                }
            }
        } catch (Exception \$e) {
            // Redis connection failed
        }
        ?>
        
        <p>
            Status: <span class="status <?php echo \$statusClass; ?>"><?php echo \$status; ?></span>
        </p>
        
        <?php if (\$status === 'online'): ?>
            <h2>Server Information</h2>
            <table>
                <tr>
                    <th>Property</th>
                    <th>Value</th>
                </tr>
                <tr>
                    <td>Redis Version</td>
                    <td><?php echo isset(\$info['redis_version']) ? \$info['redis_version'] : 'Unknown'; ?></td>
                </tr>
                <tr>
                    <td>Port</td>
                    <td><?php echo \$Port; ?></td>
                </tr>
                <tr>
                    <td>Process ID</td>
                    <td><?php echo isset(\$info['process_id']) ? \$info['process_id'] : 'Unknown'; ?></td>
                </tr>
                <tr>
                    <td>Uptime</td>
                    <td><?php echo isset(\$info['uptime_in_seconds']) ? \$info['uptime_in_seconds'] . ' seconds' : 'Unknown'; ?></td>
                </tr>
                <tr>
                    <td>Connected Clients</td>
                    <td><?php echo isset(\$info['connected_clients']) ? \$info['connected_clients'] : 'Unknown'; ?></td>
                </tr>
                <tr>
                    <td>Memory Used</td>
                    <td><?php echo isset(\$info['used_memory_human']) ? \$info['used_memory_human'] : 'Unknown'; ?></td>
                </tr>
                <tr>
                    <td>Max Memory</td>
                    <td><?php echo \$MaxMemory; ?></td>
                </tr>
                <tr>
                    <td>Max Memory Policy</td>
                    <td><?php echo \$MaxMemoryPolicy; ?></td>
                </tr>
                <tr>
                    <td>Persistence</td>
                    <td><?php echo \$Persistence ? 'Enabled (AOF)' : 'Disabled'; ?></td>
                </tr>
            </table>
        <?php else: ?>
            <p>Redis server is not running. Please check the service status.</p>
        <?php endif; ?>
        
        <a href="<?php echo \$_SERVER['PHP_SELF']; ?>" class="refresh">Refresh Status</a>
    </div>
</body>
</html>
"@ | Out-File -FilePath $redisStatusPath -Encoding utf8

Write-Log "Created Redis status page at: $redisStatusPath" "SUCCESS"

# Create Redis service control script
$redisControlPath = Join-Path $PSScriptRoot "redis_service.bat"

@"
@echo off
REM Redis Service Control Script
setlocal

set REDIS_SERVICE_NAME=Redis

if "%1"=="" goto :help
if "%1"=="start" goto :start
if "%1"=="stop" goto :stop
if "%1"=="restart" goto :restart
if "%1"=="status" goto :status
goto :help

:start
echo Starting Redis service...
sc start %REDIS_SERVICE_NAME%
if %ERRORLEVEL% EQU 0 (
    echo Redis service started successfully.
) else (
    echo Failed to start Redis service.
)
goto :eof

:stop
echo Stopping Redis service...
sc stop %REDIS_SERVICE_NAME%
if %ERRORLEVEL% EQU 0 (
    echo Redis service stopped successfully.
) else (
    echo Failed to stop Redis service.
)
goto :eof

:restart
echo Restarting Redis service...
sc stop %REDIS_SERVICE_NAME%
timeout /t 2 /nobreak > nul
sc start %REDIS_SERVICE_NAME%
if %ERRORLEVEL% EQU 0 (
    echo Redis service restarted successfully.
) else (
    echo Failed to restart Redis service.
)
goto :eof

:status
echo Checking Redis service status...
sc query %REDIS_SERVICE_NAME%
goto :eof

:help
echo Redis Service Control Script
echo Usage: redis_service.bat [command]
echo Commands:
echo   start   - Start the Redis service
echo   stop    - Stop the Redis service
echo   restart - Restart the Redis service
echo   status  - Check the Redis service status
goto :eof
"@ | Out-File -FilePath $redisControlPath -Encoding ASCII

Write-Log "Created Redis service control script at: $redisControlPath" "SUCCESS"

Write-Log "Redis installation and configuration completed successfully" "SUCCESS"
